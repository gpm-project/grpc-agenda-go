// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: agenda/services.proto

package grpc_agenda_go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_agenda_services_proto protoreflect.FileDescriptor

var file_agenda_services_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x1a,
	0x15, 0x61, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x74, 0x0a, 0x06, 0x41, 0x67, 0x65, 0x6e, 0x64, 0x61,
	0x12, 0x31, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x18, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x64, 0x61,
	0x2e, 0x41, 0x64, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0e, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x64, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x42, 0x36, 0x5a, 0x34,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x70, 0x6d, 0x2d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x61, 0x67, 0x65, 0x6e,
	0x64, 0x61, 0x2d, 0x67, 0x6f, 0x3b, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x64,
	0x61, 0x5f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_agenda_services_proto_goTypes = []interface{}{
	(*AddPersonRequest)(nil),  // 0: agenda.AddPersonRequest
	(*ListPersonRequest)(nil), // 1: agenda.ListPersonRequest
	(*Person)(nil),            // 2: agenda.Person
	(*PersonList)(nil),        // 3: agenda.PersonList
}
var file_agenda_services_proto_depIdxs = []int32{
	0, // 0: agenda.Agenda.Add:input_type -> agenda.AddPersonRequest
	1, // 1: agenda.Agenda.List:input_type -> agenda.ListPersonRequest
	2, // 2: agenda.Agenda.Add:output_type -> agenda.Person
	3, // 3: agenda.Agenda.List:output_type -> agenda.PersonList
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_agenda_services_proto_init() }
func file_agenda_services_proto_init() {
	if File_agenda_services_proto != nil {
		return
	}
	file_agenda_entities_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_agenda_services_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_agenda_services_proto_goTypes,
		DependencyIndexes: file_agenda_services_proto_depIdxs,
	}.Build()
	File_agenda_services_proto = out.File
	file_agenda_services_proto_rawDesc = nil
	file_agenda_services_proto_goTypes = nil
	file_agenda_services_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AgendaClient is the client API for Agenda service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgendaClient interface {
	// Add a new person.
	Add(ctx context.Context, in *AddPersonRequest, opts ...grpc.CallOption) (*Person, error)
	// List all persons.
	List(ctx context.Context, in *ListPersonRequest, opts ...grpc.CallOption) (*PersonList, error)
}

type agendaClient struct {
	cc grpc.ClientConnInterface
}

func NewAgendaClient(cc grpc.ClientConnInterface) AgendaClient {
	return &agendaClient{cc}
}

func (c *agendaClient) Add(ctx context.Context, in *AddPersonRequest, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := c.cc.Invoke(ctx, "/agenda.Agenda/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agendaClient) List(ctx context.Context, in *ListPersonRequest, opts ...grpc.CallOption) (*PersonList, error) {
	out := new(PersonList)
	err := c.cc.Invoke(ctx, "/agenda.Agenda/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgendaServer is the server API for Agenda service.
type AgendaServer interface {
	// Add a new person.
	Add(context.Context, *AddPersonRequest) (*Person, error)
	// List all persons.
	List(context.Context, *ListPersonRequest) (*PersonList, error)
}

// UnimplementedAgendaServer can be embedded to have forward compatible implementations.
type UnimplementedAgendaServer struct {
}

func (*UnimplementedAgendaServer) Add(context.Context, *AddPersonRequest) (*Person, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedAgendaServer) List(context.Context, *ListPersonRequest) (*PersonList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterAgendaServer(s *grpc.Server, srv AgendaServer) {
	s.RegisterService(&_Agenda_serviceDesc, srv)
}

func _Agenda_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgendaServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agenda.Agenda/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgendaServer).Add(ctx, req.(*AddPersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agenda_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgendaServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agenda.Agenda/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgendaServer).List(ctx, req.(*ListPersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Agenda_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agenda.Agenda",
	HandlerType: (*AgendaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Agenda_Add_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Agenda_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agenda/services.proto",
}
